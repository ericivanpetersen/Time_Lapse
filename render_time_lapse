#!/usr/bin/env python

from PIL import Image, ImageEnhance
import os, sys, glob
import time
import numpy as np
import json
from tqdm import tqdm

def rolling_mean(data, window):
	"""
	Compute the rolling mean of the data over the given window 
	Taken from the Deflicker app written by Maximilian Noethe
	(https://pypi.org/project/deflicker/)
	"""

	result = np.full_like(data, np.nan)
	
	conv = np.convolve(data, np.ones(window)/window, mode='valid')
	result[(len(data) - len(conv))//2: (len(conv) - len(data))//2] = conv
	return result


def array_from_keyframes(keyframe_array, num_frames):
	"""Function to produce an array of values
	to be applied in processing individual 
	frames from a list of keyframes.

	:param  keyframe_array: array of keyframes
		and values
	:param int num_frames: number of frames
	"""

	keyframe_array = np.array(keyframe_array) # Make sure it's a numpy array.
	# Expand to 2D if array is only 1D
	if keyframe_array.ndim == 1:
		keyframe_array = np.reshape(keyframe_array, (-1, keyframe_array.size))

	# Separate key indices from key values:
	keys = keyframe_array[:,0].astype(int)
	# Convert negative key indices to positive key indices:
	neg_keys = (keys<0)
	keys[neg_keys] = num_frames + keys[neg_keys]
	values = keyframe_array[:,1:].astype(float)
	
	# Initialize value array, filling in all values before first keyframe.
	value_array = np.repeat([values[0,:]], keys[0]+1, axis=0)
	# Create interpolations for segments between keyframes:
	for kk in range(keys.size-1):
		m_seg = (values[kk+1] - values[kk]) / (keys[kk+1] - keys[kk])
		v0 = values[kk] - m_seg * keys[kk]
		seg_frames = np.array([np.arange(keys[kk]+1, keys[kk+1]+1)]).transpose()
		temp_array = m_seg * seg_frames + v0
		value_array = np.vstack([value_array, temp_array])
	# Fill out remainder of values if final keyframe comes before end of sequence:
	if keys[-1] < num_frames-1:
		temp_array = np.repeat([values[-1,:]], num_frames-keys[-1]-1, axis=0)
		value_array = np.vstack([value_array, temp_array])

	return value_array

class time_lapse(object):
	"""
	Object to store information about the present time lapse 
		project and also perform processing and rendering
		steps to frames.
	"""

	def __init__(self, projpath):
		""" Initialize based on input project filepath"""
		
		# Import configuration settings.
		config_file = open(projpath + '/proj_config.json')
		config = json.load(config_file) 
		
		# Define project variables:
		self.projpath = projpath
		self.filetype = config["filetype"]
		self.size = config["size"]
		self.fr = config["frame_rate"]
		self.br = config["bit_rate"]
		self.deflicker = config["deflicker"]
		self.df_window = config["df_window"]
		self.crop_keys = config["crop"]
		self.bright_keys = config["bright"]	
		
		# Compile filelist:
		pattern = self.projpath + '/orig_frames/*' + self.filetype
		self.filelist = sorted(glob.glob(pattern))	
		self.num_frames = len(self.filelist)
		print("-----------------------------------------------")
		print("Video rendering project for {}".format(projpath))
		print("Number of Frames = {}".format(self.num_frames))	
		print("-----------------------------------------------")	
	
	def calc_deflicker(self):
		"""
		Calculate the rolling mean brightness of images
		for aiding in deflickering the time lapse clip.
		"""

		print('Calculating Deflicker Values')
		print("----------------------------")
		# Load average brightness from file if it already exists, otherwise
		#	calculate it:
		bright_file = self.projpath + 'brightness_orig_frames.csv'
		if os.path.exists(bright_file):
			print("    Reading frame brightness from file")
			orig_bright = np.genfromtxt(bright_file, delimiter=',', skip_header=0)
		else:
			orig_bright = self.calc_frame_brightness()

		# Rolling mean of brightness:
		targ_bright = rolling_mean(orig_bright, self.df_window)

		# Initialize bright_frames if it doesn't exist yet:
		if self.bright_keys is None:
			self.bright_keys = np.array([[0,1],[-1,1]])
			self.bright_frames = array_from_keyframes(self.bright_keys, self.num_frames)
			self.bright_frames = self.bright_frames.flatten()

		# Calculate deflickering ratio for frames, make sure it is same shape as
		#	the brightness array bright_frames being applied to frames:
		mod_ratio = targ_bright / orig_bright
		mod_ratio = np.reshape(mod_ratio, self.bright_frames.shape)
		mod_ratio[np.isnan(mod_ratio)] = 1	
		# Modify brightness applied to rendering frames:
		self.bright_frames *= mod_ratio
		print("    Done calculating deflicker values")
	
	def calc_frame_brightness(self):
		"""
		Calculate the average brightness of each individual frame
		"""
	
		print("Assessing Brightness of Images for Deflicker")

		bright_list = []
		for filename in tqdm(self.filelist):
			image = Image.open(filename)
			greyscale_image = image.convert('L')
			histogram = np.array(greyscale_image.histogram())
			pixels = np.sum(histogram)
			hist_vals = np.arange(0, 256)

			brightness = np.sum( hist_vals * histogram / pixels ) / 255	
			bright_list.append(brightness)
	
		orig_bright = np.array(bright_list)

		# Save to file so that you don't have to calculate each time:
		bright_file = (self.projpath + 'brightness_orig_frames.csv')
		np.savetxt(bright_file, orig_bright, delimiter=',')

		return orig_bright

	def auto_crop(self):
		""" Reads in first file to determine autocrop value
		and produce frame value array """

		print("    Determining auto crop for {}".format(self.filelist[0]))
		print("    Ratio of {}:1 for chosen size of {}".format(self.size[0]/self.size[1], self.size))
		# Read in first file:
		test_im = Image.open(self.filelist[0])
		w, h = test_im.size
		h2 = w * self.size[1]/self.size[0]
		yy = (h-h2)/2
		crop_key = [0, 0, yy, w, h-yy]
		
		self.crop_frames = array_from_keyframes(crop_key, self.num_frames)	

	def process_keyframes(self):
		""" Calculate value arrays from keyframes for the project """

		# If no brightness is selected, pass:
		if self.bright_keys is None:
			pass
		else:
			self.bright_keys = np.array(self.bright_keys)
			# If only one value is selected (static brightness change),
			#	modify to produce keyframe array:
			if self.bright_keys.size == 1:
				self.bright_keys = np.hstack([0, self.bright_keys])
			self.bright_frames = array_from_keyframes(self.bright_keys, self.num_frames)		

		# If no crop indicated, produce an auto-crop (letterboxing):
		if self.crop_keys is None:
			self.auto_crop()
		else:
			# Convert to numpy array
			self.crop_keys = np.array( [np.array(cki) for cki in self.crop_keys])
			# If only one crop value is selected (no "Ken Burns" effect),
			#	modify to produce keyframe array:
			if self.crop_keys.size == 4:
				self.crop_keys = np.hstack([0, self.crop_keys])
			self.crop_frames = array_from_keyframes(self.crop_keys, self.num_frames)
	
	def render_frames(self): 
		"""
		Function to process input frames and render output frames
		based on brightness, crop, and size values.
		"""

		# Create path if it doesn't exist: 
		if not os.path.exists(self.projpath + 'rendered_frames/'):
			os.makedirs(self.projpath + 'rendered_frames/')	
	
		print("Rendering {} Frames".format(self.num_frames))
		print("---------------------")	
		n=0 # Frame Index
		for filename in tqdm(self.filelist):

			# READ IN DATA:
			im = Image.open(filename)

			# PROCESS DATA:
			# ----------------------------------
			# CROP:
			im = im.crop(self.crop_frames[n,:])
			# BRIGHTNESS:
			if self.bright_keys is None:
				pass
			else:
				# No change if brightness = 1 or NaN
				if np.isnan(self.bright_frames[n]) or self.bright_frames[n] == 1:
					pass
				else:
					brighten = ImageEnhance.Brightness(im)
					im = brighten.enhance(self.bright_frames[n])
			# RESIZE:
			im = im.resize(self.size)
			# ----------------------------------

			# SAVE DATA:
			im.save( ('%s/rendered_frames/frame-%05d.jpg' % (self.projpath, n+1)), quality=95)
			n=n+1 # Advance frame index

		print("    Done rendering {} frames".format(self.num_frames))

	def render_video(self):
		""" Renders video from processed frames """
	
		print("Rendering Video")	
		print("---------------")
	
		# Construct ffmpeg command
		command = 'ffmpeg -f image2 -r ' + str(self.fr) + ' -i ' + self.projpath + '/rendered_frames/frame-%05d.jpg -b:v ' + self.br + ' -y ' + self.projpath + '/rendered_video.mp4'
		
		print(command)
		print()
		os.system(command) # Run ffmpeg command

def main(project_path):
	"""Main function runs through all the
	necessary steps of rendering time lapse 
	video based on the parameters written in
	the project config file.

	:param str project_path: path to project directory
	"""

	t0 = time.time() # Start the timer

	# Intro Text:
	print("----------------------------------------------")
	print("Render Time Lapse (or Stop Motion) Video, a Python App")
	print("    Developed by Eric Ivan Petersen, September 7, 2019")
	print("    Contact: erictheredbaron@gmail.com")
	print("    Last updated September 7, 2019")
	print("----------------------------------------------")
	print()

	# Set up the project:
	proj = time_lapse(project_path)
	t1 = time.time()

	# Process keyframes
	print()
	print("Processing Keyframes")
	print("--------------------")
	proj.process_keyframes()
	t2 = time.time()
	print("    Done processing keyframes")
	print()

	# Calculate deflickering if desired:
	if proj.deflicker:
		proj.calc_deflicker()
	t3 = time.time()
	print()

	# Render individual frames:
	proj.render_frames()
	t4 = time.time()

	# Compile frames into video:
	print()
	proj.render_video()
	t5 = time.time()

	# Final report:
	print()
	print("Project Rendering Successful!")
	print("-----------------------------")
	print("    Total time elapsed = {:.1f} seconds".format(t5-t0))
	print("         Time calculating deflicker = {:.1f} seconds".format(t3-t2))
	print("         Time rendering frames = {:.1f} seconds".format(t4-t3))
	print("         Time rendering video = {:.1f} seconds".format(t5-t4))
	print("------------------------------")
	print("Final rendered video is at {}.".format(proj.projpath + 'rendered_video.mp4'))
	print("------------------------------")

if __name__ == '__main__':

	# If no filepath given, use the directory one is currently in:
	if len(sys.argv)==1:
		filedir = './'
	else:
		filedir = sys.argv[1]
	main(filedir)
